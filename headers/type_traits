#ifndef _TYPE_TRAITS_
#define _TYPE_TRAITS_

#include <cstddef>

namespace STD
{
    template <class T, class U>
    struct is_same : false_type
    {
    };

    template <class T>
    struct is_same<T, T> : true_type
    {
    };

    // 20.10.7.2, reference modifications:
    template <class T>
    struct remove_reference
    {
        typedef T type;
    };

    template <class T>
    struct remove_reference<T&>
    {
        typedef T type;
    };

    template <class T>
    struct remove_const
    {
        typedef T type;
    };

    template <class T>
    struct remove_const<const T>
    {
        typedef T type;
    };

    template <class T>
    struct remove_volatile
    {
        typedef T type;
    };

    template <class T>
    struct remove_volatile<volatile T>
    {
        typedef T type;
    };

    template <class T>
    struct remove_cv
    {
        typedef typename remove_const<typename remove_volatile<T>::type>::type type;
    };

    template <class T>
    using remove_cv_t = typename remove_cv<T>::type;

    // 20.10.3, helper class:
    template <class T, T v>
    struct integral_constant
    {
        static constexpr T value = v;
        typedef T value_type;
        typedef integral_constant<T, v> type;
        constexpr operator value_type() const noexcept { return value; }
        constexpr value_type operator()() const noexcept { return value; }
    };

    template <bool B>
    using bool_constant = integral_constant<bool, B>;

    typedef bool_constant<true> true_type;
    typedef bool_constant<false> false_type;

    // 20.10.4.1, primary type categories:
    template <class T>
    struct is_void : is_same<void, remove_cv_t<T>>
    {
    };

    template <class T>
    struct is_null_pointer : is_same<nullptr_t, remove_cv_t<T>>
    {
    };

    namespace _internal
    {
        template <class T>
        struct is_integral : false_type
        {
        };

        template <>
        struct is_integral<bool> : true_type
        {
        };

        template <>
        struct is_integral<char> : true_type
        {
        };

        template <>
        struct is_integral<signed char> : true_type
        {
        };

        template <>
        struct is_integral<unsigned char> : true_type
        {
        };

        template <>
        struct is_integral<short> : true_type
        {
        };

        template <>
        struct is_integral<unsigned short> : true_type
        {
        };

        template <>
        struct is_integral<int> : true_type
        {
        };

        template <>
        struct is_integral<unsigned int> : true_type
        {
        };

        template <>
        struct is_integral<long> : true_type
        {
        };

        template <>
        struct is_integral<unsigned long> : true_type
        {
        };

        template <>
        struct is_integral<long long> : true_type
        {
        };

        template <>
        struct is_integral<unsigned long long> : true_type
        {
        };

        template <>
        struct is_integral<char16_t> : true_type
        {
        };

        template <>
        struct is_integral<char32_t> : true_type
        {
        };

        template <>
        struct is_integral<wchar_t> : true_type
        {
        };
    }

    template <class T>
    struct is_integral : _internal::is_integral<remove_cv_t<T>>
    {
    };

    namespace _internal
    {
        template <class T>
        struct is_floating_point : false_type
        {
        };

        template <>
        struct is_floating_point<float> : true_type
        {
        };

        template <>
        struct is_floating_point<double> : true_type
        {
        };

        template <>
        struct is_floating_point<long double> : true_type
        {
        };
    }

    template <class T>
    struct is_floating_point : _internal::is_floating_point<remove_cv_t<T>>
    {
    };

    template <class T>
    struct is_array : false_type
    {
    };

    template <class T>
    struct is_array<T[]> : true_type
    {
    };

    template <class T, size_t N>
    struct is_array<T[N]> : true_type
    {
    };

    namespace _internal
    {
        // e.g. "int * const" doesn't resolve in the <T*> case
        // so need to remove_cv before doing the resolving
        template <class T>
        struct is_pointer : false_type
        {
        };

        template <class T>
        struct is_pointer<T*> : true_type
        {
        };
    }

    template <class T>
    struct is_pointer : _internal::is_pointer<remove_cv_t<T>>
    {
    };

    template <class T>
    struct is_lvalue_reference : false_type
    {
    };

    template <class T>
    struct is_lvalue_reference<T&> : true_type
    {
    };

    template <class T>
    struct is_rvalue_reference : false_type
    {
    };

    template <class T>
    struct is_rvalue_reference<T&&> : true_type
    {
    };

    namespace _internal
    {
        template <class T>
        struct is_function : false_type
        {
        };

        template <class T, class ...Args>
        struct is_function<T(Args...) &> : true_type
        {
        };

        template <class T, class ...Args>
        struct is_function<T(Args..., ...) &> : true_type
        {
        };

        template <class T, class ...Args>
        struct is_function<T(Args...) && > : true_type
        {
        };

        template <class T, class ...Args>
        struct is_function<T(Args..., ...) && > : true_type
        {
        };

        template <class T, class ...Args>
        struct is_function<T(Args...)> : true_type
        {
        };

        template <class T, class ...Args>
        struct is_function<T(Args..., ...)> : true_type
        {
        };
    }

    template <class T>
    struct is_function : _internal::is_function<remove_cv_t<T>>
    {
    };

    namespace _internal
    {
        template <class T>
        struct is_member_function_pointer : false_type
        {
        };

        template <class T, typename M, typename ...Args>
        struct is_member_function_pointer<T(M::*)(Args...)> : is_function<T(Args...)>
        {
        };

        template <class T, typename M, typename ...Args>
        struct is_member_function_pointer<T(M::*)(Args...) const> : is_function<T(Args...)>
        {
        };

        template <class T, typename M>
        struct is_member_function_pointer<T(M::*)(...)> : is_function<T(...)>
        {
        };
    }

    template <class T>
    struct is_member_function_pointer : _internal::is_member_function_pointer<remove_cv_t<T>>
    {
    };

    namespace _internal
    {
        template <class T>
        struct is_member_pointer : false_type
        {
        };

        template <class T, typename M>
        struct is_member_pointer<T M::*> : true_type
        {
        };
    }

    template <class T>
    struct is_member_pointer : _internal::is_member_pointer<remove_cv_t<T>>
    {
    };

    template <class T>
    struct is_member_object_pointer : bool_constant<!is_member_function_pointer<T>::value && is_member_pointer<T>::value>
    {
    };

    template <class T>
    struct is_enum : bool_constant<__is_enum(T)>
    {
    };

    template <class T> struct is_union; //todo
    template <class T> struct is_class; //todo

    // 20.10.4.2, composite type categories:
    template <class T>
    struct is_reference : false_type
    {
    };

    template <class T>
    struct is_reference<T &> : true_type
    {
    };

    template <class T>
    struct is_reference<T &&> : true_type
    {
    };

    template <class T>
    struct is_arithmetic
        : bool_constant<is_integral<remove_cv_t<T>>::value || is_floating_point<remove_cv_t<T>>::value>
    {
    };

    template <class T>
    struct is_fundamental : bool_constant<is_arithmetic<T>::value || is_void<T>::value || is_null_pointer<T>::value>
    {
    };

    template <class T> struct is_object; //todo
    template <class T> struct is_scalar; //todo
    template <class T> struct is_compound; //todo

    // 20.10.4.3, type properties:
    template <class T>
    struct is_const : false_type
    {
    };

    template <class T>
    struct is_const<const T> : true_type
    {
    };

    template <class T>
    struct is_volatile : false_type
    {
    };

    template <class T>
    struct is_volatile<volatile T> : true_type
    {
    };

    template <class T> struct is_trivial;
    template <class T> struct is_trivially_copyable;
    template <class T> struct is_standard_layout;
    template <class T> struct is_pod;
    template <class T> struct is_literal_type;
    template <class T> struct is_empty;
    template <class T> struct is_polymorphic;
    template <class T> struct is_abstract;
    template <class T> struct is_final;

    namespace _internal
    {
        template <class T, bool>
        struct is_signed : bool_constant<T(-1) < T(0)>
        {
        };

        template <class T>
        struct is_signed<T, false> : false_type
        {
        };
    }

    template <class T>
    struct is_signed : _internal::is_signed<T, is_arithmetic<T>::value>
    {
    };

    namespace _internal
    {
        template <class T, bool>
        struct is_unsigned : bool_constant<T(0) < T(-1)>
        {
        };

        template <class T>
        struct is_unsigned<T, false> : false_type
        {
        };
    }

    template <class T>
    struct is_unsigned : _internal::is_unsigned<T, is_arithmetic<T>::value>
    {
    };

    template <class T, class... Args> struct is_constructible;
    template <class T> struct is_default_constructible;
    template <class T> struct is_copy_constructible;
    template <class T> struct is_move_constructible;
    template <class T, class U> struct is_assignable;
    template <class T> struct is_copy_assignable;
    template <class T> struct is_move_assignable;
    template <class T> struct is_destructible;
    template <class T, class... Args> struct is_trivially_constructible;
    template <class T> struct is_trivially_default_constructible;
    template <class T> struct is_trivially_copy_constructible;
    template <class T> struct is_trivially_move_constructible;
    template <class T, class U> struct is_trivially_assignable;
    template <class T> struct is_trivially_copy_assignable;
    template <class T> struct is_trivially_move_assignable;
    template <class T> struct is_trivially_destructible;
    template <class T, class... Args> struct is_nothrow_constructible;
    template <class T> struct is_nothrow_default_constructible;
    template <class T> struct is_nothrow_copy_constructible;
    template <class T> struct is_nothrow_move_constructible;
    template <class T, class U> struct is_nothrow_assignable;
    template <class T> struct is_nothrow_copy_assignable;
    template <class T> struct is_nothrow_move_assignable;
    template <class T> struct is_nothrow_destructible;
    template <class T> struct has_virtual_destructor;
    // 20.10.5, type property queries:
    template <class T> struct alignment_of;
    template <class T> struct rank;
    template <class T, unsigned I = 0> struct extent;

    // 20.10.6, type relations:
    //todo
    template <class Base, class Derived>
    struct is_base_of
    {
    private:
        static constexpr bool val(typename remove_reference<Base>::type *) { return true; }
        static constexpr bool val(...) { return false; }
    public:
        static constexpr bool value = val(reinterpret_cast<typename remove_reference<Derived>::type *>(0));
    };

    /*template <class Base>
    struct is_base_of<Base, Base>
    {
        const bool value = true;
    };*/

    template <class From, class To> struct is_convertible;
    // 20.10.7.1, const-volatile modifications:
    /*template <class T>
    struct remove_const
    {
        typedef T type;
    };

    template <class T>
    struct remove_const<const T>
    {
        typedef T type;
    };*/

    template <class T>
    struct add_const
    {
        typedef const T type;
    };

    template <class T>
    struct add_volatile
    {
        typedef volatile T type;
    };

    template <class T>
    struct add_cv
    {
        typedef const volatile T type;
    };

    template <class T>
    using remove_const_t = typename remove_const<T>::type;

    template <class T>
    using remove_volatile_t = typename remove_volatile<T>::type;

    template <class T>
    using add_const_t = typename add_const<T>::type;

    template <class T>
    using add_volatile_t = typename add_volatile<T>::type;

    template <class T>
    using add_cv_t = typename add_cv<T>::type;

    template <class T>
    struct add_lvalue_reference
    {
        typedef T& type;
    };

    template <class T>
    struct add_lvalue_reference<T&>
    {
        typedef T& type;
    };

    template <class T>
    struct add_lvalue_reference<T&&>
    {
        typedef T& type;
    };

    template <class T>
    struct add_rvalue_reference
    {
        typedef T&& T;
    };

    template <class T>
    struct add_rvalue_reference<T&>
    {
        typedef T&& T;
    };

    template <class T>
    struct add_rvalue_reference<T&&>
    {
        typedef T&& T;
    };

    template <class T>
    using remove_reference_t = typename remove_reference<T>::type;

    template <class T>
    using add_lvalue_reference_t = typename add_lvalue_reference<T>::type;

    template <class T>
    using add_rvalue_reference_t = typename add_rvalue_reference<T>::type;

    // 20.10.7.3, sign modifications:
    template <class T> struct make_signed;
    template <class T> struct make_unsigned;

    template <class T>
    using make_signed_t = typename make_signed<T>::type;

    template <class T>
    using make_unsigned_t = typename make_unsigned<T>::type;

    // 20.10.7.4, array modifications:
    template <class T>
    struct remove_extent
    {
        typedef T type;
    };

    template <class T>
    struct remove_extent<T[]>
    {
        typedef T type;
    };

    template <class T, size_t N>
    struct remove_extent<T[N]>
    {
        typedef T type;
    };

    template <class T>
    struct remove_all_extents
    {
        typedef T type;
    };

    template <class T>
    struct remove_all_extents<T[]> : remove_all_extents<T>
    {
    };

    template <class T, size_t N>
    struct remove_all_extents<T[N]> : remove_all_extents<T>
    {
    };

    template <class T>
    using remove_extent_t = typename remove_extent<T>::type;

    template <class T>
    using remove_all_extents_t = typename remove_all_extents<T>::type;

    // 20.10.7.5, pointer modifications:
    template <class T>
    struct remove_pointer
    {
        typedef T type;
    };

    template <class T>
    struct remove_pointer<T*>
    {
        typedef T type;
    };

    template <class T>
    struct add_pointer
    {
        typedef T* type;
    };

    template <class T>
    struct add_pointer<T*>
    {
        typedef T* type;
    };

    template <class T>
    using remove_pointer_t = typename remove_pointer<T>::type;

    template <class T>
    using add_pointer_t = typename add_pointer<T>::type;

    // 20.10.7.6, other transformations:
    template <STD::size_t Len,
        STD::size_t Align = default - alignment> // see 20.10.7.6
    struct aligned_storage;

    template <STD::size_t Len, class... Types> struct aligned_union;

    template <class T> struct decay;

    template <bool, class T = void>
    struct enable_if
    {
    };

    template <class T>
    struct enable_if<true, T>
    {
        typedef T type;
    };

    template <bool, class T, class F>
    struct conditional
    {
        typedef F type;
    };

    template <class T, class F>
    struct conditional<true, T, F>
    {
        typedef T type;
    };

    template <class... T> struct common_type;
    template <class T> struct underlying_type;
    template <class> class result_of; // not defined
    template <class F, class... ArgTypes> class result_of<F(ArgTypes...)>;

    template <STD::size_t Len,
        STD::size_t Align = default - alignment > // see 20.10.7.6
        using aligned_storage_t = typename aligned_storage<Len, Align>::type;

    template <STD::size_t Len, class... Types>
    using aligned_union_t = typename aligned_union<Len, Types...>::type;

    template <class T>
    using decay_t = typename decay<T>::type;

    template <bool b, class T = void>
    using enable_if_t = typename enable_if<b, T>::type;

    template <bool b, class T, class F>
    using conditional_t = typename conditional<b, T, F>::type;

    template <class... T>
    using common_type_t = typename common_type<T...>::type;

    template <class T>
    using underlying_type_t = typename underlying_type<T>::type;

    template <class T>
    using result_of_t = typename result_of<T>::type;

    template <class...>
    using void_t = void;
}

#endif