#pragma once
#ifndef _STRING_
#define _STRING_

#include <cstdint>
#include <initializer_list>
#include <memory>
#include <cwchar>
#include <iterator>
#include <cstring> //memcpy
#include <utility> //swap

namespace STD
{
    template<class charT>
    struct char_traits;

    template<>
    struct char_traits<char>
    {
        typedef char char_type;
        typedef int int_type;
        typedef streamoff off_type;
        typedef streampos pos_type;
        typedef mbstate_t state_type;
        static void assign(char_type& c1, const char_type& c2) noexcept
        {
            c1 = c2;
        }

        static constexpr bool eq(char_type c1, char_type c2) noexcept
        {
            return c1 == c2;
        }

        static constexpr bool lt(char_type c1, char_type c2) noexcept
        {
            return c1 < c2;
        }

        static int compare(const char_type* s1, const char_type* s2, size_t n);

        static size_t length(const char_type* s)
        {
            size_t i = 0;
            while (s != nullptr && !eq(*s, char_type()) )
            {
                ++i;
                ++s;
            }

            return i;
        }

        static const char_type* find(const char_type* s, size_t n,
            const char_type& a);

        static char_type* move(char_type* s1, const char_type* s2, size_t n)
        {
            for (size_t i = 0; i < n; ++i)
            {
                assign(s1[i], s2[i]);
            }

            return s1;
        }

        static char_type* copy(char_type* s1, const char_type* s2, size_t n);

        static char_type* assign(char_type* s, size_t n, char_type a)
        {
            for (size_t i = 0; i < n; ++i)
            {
                assign(s[i], a);
            }

            return s;
        }

        static constexpr int_type not_eof(int_type c) noexcept;

        static constexpr char_type to_char_type(int_type c) noexcept;
        static constexpr int_type to_int_type(char_type c) noexcept;
        static constexpr bool eq_int_type(int_type c1, int_type c2) noexcept;
        static constexpr int_type eof() noexcept;
    };

    template<>
    struct char_traits<char16_t>
    {
        typedef char16_t char_type;
        typedef uint_least16_t int_type;
        typedef streamoff off_type;
        typedef u16streampos pos_type;
        typedef mbstate_t state_type;
        static void assign(char_type& c1, const char_type& c2) noexcept;
        static constexpr bool eq(char_type c1, char_type c2) noexcept;
        static constexpr bool lt(char_type c1, char_type c2) noexcept;
        static int compare(const char_type* s1, const char_type* s2, size_t n);
        static size_t length(const char_type* s);
        static const char_type* find(const char_type* s, size_t n,
            const char_type& a);
        static char_type* move(char_type* s1, const char_type* s2, size_t n);
        static char_type* copy(char_type* s1, const char_type* s2, size_t n);
        static char_type* assign(char_type* s, size_t n, char_type a);
        static constexpr int_type not_eof(int_type c) noexcept;
        static constexpr char_type to_char_type(int_type c) noexcept;
        static constexpr int_type to_int_type(char_type c) noexcept;
        static constexpr bool eq_int_type(int_type c1, int_type c2) noexcept;
        static constexpr int_type eof() noexcept;
    };

    template<>
    struct char_traits<char32_t>
    {
        typedef char32_t char_type;
        typedef uint_least32_t int_type;
        typedef streamoff off_type;
        typedef u32streampos pos_type;
        typedef mbstate_t state_type;
        static void assign(char_type& c1, const char_type& c2) noexcept;
        static constexpr bool eq(char_type c1, char_type c2) noexcept;
        static constexpr bool lt(char_type c1, char_type c2) noexcept;
        static int compare(const char_type* s1, const char_type* s2, size_t n);
        static size_t length(const char_type* s);
        static const char_type* find(const char_type* s, size_t n, const char_type& a);
        static char_type* move(char_type* s1, const char_type* s2, size_t n);
        static char_type* copy(char_type* s1, const char_type* s2, size_t n);
        static char_type* assign(char_type* s, size_t n, char_type a);
        static constexpr int_type not_eof(int_type c) noexcept;
        static constexpr char_type to_char_type(int_type c) noexcept;
        static constexpr int_type to_int_type(char_type c) noexcept;
        static constexpr bool eq_int_type(int_type c1, int_type c2) noexcept;
        static constexpr int_type eof() noexcept;
    };

    template<>
    struct char_traits<wchar_t>
    {
        typedef wchar_t char_type;
        typedef wint_t int_type;
        typedef streamoff off_type;
        typedef wstreampos pos_type;
        typedef mbstate_t state_type;
        static void assign(char_type& c1, const char_type& c2) noexcept;
        static constexpr bool eq(char_type c1, char_type c2) noexcept;
        static constexpr bool lt(char_type c1, char_type c2) noexcept;
        static int compare(const char_type* s1, const char_type* s2, size_t n);
        static size_t length(const char_type* s);
        static const char_type* find(const char_type* s, size_t n,
            const char_type& a);
        static char_type* move(char_type* s1, const char_type* s2, size_t n);
        static char_type* copy(char_type* s1, const char_type* s2, size_t n);
        static char_type* assign(char_type* s, size_t n, char_type a);
        static constexpr int_type not_eof(int_type c) noexcept;
        static constexpr char_type to_char_type(int_type c) noexcept;
        static constexpr int_type to_int_type(char_type c) noexcept;
        static constexpr bool eq_int_type(int_type c1, int_type c2) noexcept;
        static constexpr int_type eof() noexcept;
    };

    // 21.4, basic_string:
    // todo: solve charT is const qualified (and maybe other qualifiers?)
    template<class charT, class traits = char_traits<charT>, class Allocator = allocator<charT> >
    class basic_string
    {
    public:
        // types:
        typedef traits traits_type;
        typedef typename traits::char_type value_type;
        typedef Allocator allocator_type;
        typedef typename allocator_traits<Allocator>::size_type size_type;
        typedef typename allocator_traits<Allocator>::difference_type difference_type;
        typedef value_type& reference;
        typedef const value_type& const_reference;
        typedef typename allocator_traits<Allocator>::pointer pointer;
        typedef typename allocator_traits<Allocator>::const_pointer const_pointer;
        typedef front_insert_iterator<basic_string<charT, traits, Allocator>> iterator; // See 23.2 //todo check iterator type
        typedef move_iterator<basic_string<charT, traits, Allocator>> const_iterator; // See 23.2 //todo check iterator type
        typedef reverse_iterator<const_iterator> const_reverse_iterator;
        typedef reverse_iterator<iterator> reverse_iterator;
        static const size_type npos = -1;

        // 21.4.2, construct/copy/destroy:
        basic_string() noexcept(noexcept(Allocator()))
            : basic_string(Allocator())
        {
        }

        explicit basic_string(const Allocator& a) noexcept
            : mAllocator(a), mStr(mAllocator.allocate(2 * sizeof(charT))), mLength(0), mCapacity(2)
        {
            //should the allocator take care of charT size internally?
            //mStr = mAllocator.allocate(2 * sizeof(charT));
            mStr[mLength] = 0;
        }

        basic_string(const basic_string& str)
            : mAllocator(str.mAllocator), mStr(mAllocator.allocate(str.mCapacity * sizeof(charT))), mLength(str.mLength), mCapacity(str.mCapacity)
        {
            memcpy(mStr, str.mStr, mLength * sizeof(charT));
            mStr[mLength] = 0;
        }

        basic_string(basic_string&& str) noexcept
            : mAllocator(str.mAllocator), mStr(nullptr), mLength(0), mCapacity(0)
        {
            swap(str);
        }

        basic_string(const basic_string& str, size_type pos, size_type n = npos,
            const Allocator& a = Allocator())
        {
            if (pos > str.size())
            {
                throw out_of_range("pos is out of range");
            }

            size_type len = str.size() - pos;
            if (len > n)
            {
                len = n;
            }

            mStr = mAllocator.allocate(len * sizeof(charT));
            mCapacity = len;
            mLength = len;

            memcpy(mStr, str.mStr + pos, len * sizeof(charT));
            mStr[mLength] = 0;
        }

        basic_string(const charT* s,
            size_type n, const Allocator& a = Allocator())
            : mAllocator(a), mLength(n), mCapacity(n + 1), mStr(mAllocator.allocate(mCapacity * sizeof(charT)))
        {
            memcpy(mStr, s, n * sizeof(charT));
            mStr[mLength] = 0;
        }

        basic_string(const charT* s, const Allocator& a = Allocator())
            : mAllocator(a), mLength(traits::length(s)), mCapacity(mLength + 1), mStr(mAllocator.allocate(mCapacity * sizeof(charT)))
        {
            memcpy(mStr, s, mLength * sizeof(charT));
            mStr[mLength] = 0;
        }

        basic_string(size_type n, charT c, const Allocator& a = Allocator())
            : mAllocator(a), mLength(n), mCapacity(n + 1), mStr(mAllocator.allocate(mCapacity * sizeof(charT)))
        {
            memset(mStr, c, mLength * sizeof(charT));
            mStr[mLength] = 0;
        }

        template<class InputIterator>
        basic_string(InputIterator begin, InputIterator end,
            const Allocator& a = Allocator());

        basic_string(initializer_list<charT> il, const Allocator& a = Allocator());

        basic_string(const basic_string& str, const Allocator& alloc)
            : mAllocator(alloc), mStr(mAllocator.allocate(str.capacity() * sizeof(charT))), mLength(str.size()), mCapacity(str.capacity())
        {
            memcpy(mStr, str.c_str(), mLength * sizeof(charT));
            mStr[mLength] = 0;
        }

        basic_string(basic_string&& str, const Allocator& alloc);

        ~basic_string()
        {
            mAllocator.deallocate(mStr, mCapacity);
        }

        basic_string& operator=(const basic_string& str)
        {
            if (*this == str)
            {
                return *this;
            }

            if (str.size() >= mCapacity)
            {
                mAllocator.deallocate(mStr, mCapacity);
                mCapacity = str.size() * 2 * sizeof(charT);
                mStr = mAllocator.allocate(mCapacity);
            }

            memcpy(mStr, str.c_str(), str.size() * sizeof(charT));
            mLength = str.size();
            mStr[mLength] = 0;
        }

        basic_string& operator=(basic_string&& str)
            noexcept(allocator_traits<Allocator>::propagate_on_container_move_assignment::value ||
                allocator_traits<Allocator>::is_always_equal::value);
        basic_string& operator=(const charT* s);
        basic_string& operator=(charT c);
        basic_string& operator=(initializer_list<charT>);

        // 21.4.3, iterators:
        iterator begin() noexcept
        {
            return iterator(*this);
        }

        const_iterator begin() const noexcept;

        iterator end() noexcept;

        const_iterator end() const noexcept;
        reverse_iterator rbegin() noexcept;
        const_reverse_iterator rbegin() const noexcept;
        reverse_iterator rend() noexcept;
        const_reverse_iterator rend() const noexcept;
        const_iterator cbegin() const noexcept;
        const_iterator cend() const noexcept;
        const_reverse_iterator crbegin() const noexcept;
        const_reverse_iterator crend() const noexcept;
        // 21.4.4, capacity:
        size_type size() const noexcept
        {
            return mLength;
        }

        size_type length() const noexcept;

        size_type max_size() const noexcept
        {
            //todo: figure out max size
            return 1000;
        }

        void resize(size_type n, charT c);
        void resize(size_type n);

        size_type capacity() const noexcept
        {
            return mCapacity;
        }

        void reserve(size_type res_arg = 0);
        void shrink_to_fit();
        void clear() noexcept;
        bool empty() const noexcept;
        // 21.4.5, element access:
        const_reference operator[](size_type pos) const;
        reference operator[](size_type pos);
        const_reference at(size_type n) const;
        reference at(size_type n);
        const charT& front() const;
        charT& front();
        const charT& back() const;
        charT& back();
        // 21.4.6, modifiers:
        basic_string& operator+=(const basic_string& str);
        basic_string& operator+=(const charT* s);
        basic_string& operator+=(charT c);
        basic_string& operator+=(initializer_list<charT>);
        basic_string& append(const basic_string& str);
        basic_string& append(const basic_string& str, size_type pos,
            size_type n = npos);
        basic_string& append(const charT* s, size_type n);
        basic_string& append(const charT* s);
        basic_string& append(size_type n, charT c);
        template<class InputIterator>
        basic_string& append(InputIterator first, InputIterator last);
        basic_string& append(initializer_list<charT>);

        void push_back(charT c)
        {
            //todo: actual logic here
            mStr[mLength] = c;
            ++mLength;
        }

        basic_string& assign(const basic_string& str);
        basic_string& assign(basic_string&& str)
            noexcept(allocator_traits<Allocator>::propagate_on_container_move_assignment::value ||
                allocator_traits<Allocator>::is_always_equal::value);
        basic_string& assign(const basic_string& str, size_type pos,
            size_type n = npos);
        basic_string& assign(const charT* s, size_type n);
        basic_string& assign(const charT* s);
        basic_string& assign(size_type n, charT c);
        template<class InputIterator>
        basic_string& assign(InputIterator first, InputIterator last);
        basic_string& assign(initializer_list<charT>);
        basic_string& insert(size_type pos1, const basic_string& str);
        basic_string& insert(size_type pos1, const basic_string& str,
            size_type pos2, size_type n = npos);
        basic_string& insert(size_type pos, const charT* s, size_type n);
        basic_string& insert(size_type pos, const charT* s);
        basic_string& insert(size_type pos, size_type n, charT c);
        iterator insert(const_iterator p, charT c);
        iterator insert(const_iterator p, size_type n, charT c);
        template<class InputIterator>
        iterator insert(const_iterator p, InputIterator first, InputIterator last);
        iterator insert(const_iterator p, initializer_list<charT>);
        basic_string& erase(size_type pos = 0, size_type n = npos);
        iterator erase(const_iterator p);
        iterator erase(const_iterator first, const_iterator last);
        void pop_back();
        basic_string& replace(size_type pos1, size_type n1,
            const basic_string& str);
        basic_string& replace(size_type pos1, size_type n1,
            const basic_string& str,
            size_type pos2, size_type n2 = npos);
        basic_string& replace(size_type pos, size_type n1, const charT* s,
            size_type n2);
        basic_string& replace(size_type pos, size_type n1, const charT* s);
        basic_string& replace(size_type pos, size_type n1, size_type n2,
            charT c);
        basic_string& replace(const_iterator i1, const_iterator i2,
            const basic_string& str);
        basic_string& replace(const_iterator i1, const_iterator i2, const charT* s,
            size_type n);
        basic_string& replace(const_iterator i1, const_iterator i2, const charT* s);
        basic_string& replace(const_iterator i1, const_iterator i2,
            size_type n, charT c);
        template<class InputIterator>
        basic_string& replace(const_iterator i1, const_iterator i2,
            InputIterator j1, InputIterator j2);
        basic_string& replace(const_iterator, const_iterator, initializer_list<charT>);
        size_type copy(charT* s, size_type n, size_type pos = 0) const;
        void swap(basic_string& str)
            noexcept(allocator_traits<Allocator>::propagate_on_container_swap::value ||
                allocator_traits<Allocator>::is_always_equal::value)
        {
            // todo: verify with standard
            auto tmp = mStr;
            mStr = str.mStr;
            str.mStr = tmp;

            auto tmp2 = mCapacity;
            mCapacity = str.mCapacity;
            str.mCapacity = tmp2;

            auto tmp3 = mLength;
            mLength = str.mLength;
            str.mLength = tmp3;

            auto tmp4 = mAllocator;
            mAllocator = str.mAllocator;
            str.mAllocator = tmp4;
        }

        // 21.4.7, string operations:
        const charT* c_str() const noexcept
        {
            return mStr;
        }

        const charT* data() const noexcept;
        allocator_type get_allocator() const noexcept;
        size_type find(const basic_string& str, size_type pos = 0) const noexcept;
        size_type find(const charT* s, size_type pos, size_type n) const;
        size_type find(const charT* s, size_type pos = 0) const;
        size_type find(charT c, size_type pos = 0) const;
        size_type rfind(const basic_string& str, size_type pos = npos) const noexcept;
        size_type rfind(const charT* s, size_type pos, size_type n) const;
        size_type rfind(const charT* s, size_type pos = npos) const;
        size_type rfind(charT c, size_type pos = npos) const;
        size_type find_first_of(const basic_string& str,
            size_type pos = 0) const noexcept;
        size_type find_first_of(const charT* s,
            size_type pos, size_type n) const;
        size_type find_first_of(const charT* s, size_type pos = 0) const;
        size_type find_first_of(charT c, size_type pos = 0) const;
        size_type find_last_of(const basic_string& str,
            size_type pos = npos) const noexcept;
        size_type find_last_of(const charT* s,
            size_type pos, size_type n) const;
        size_type find_last_of(const charT* s, size_type pos = npos) const;
        size_type find_last_of(charT c, size_type pos = npos) const;
        size_type find_first_not_of(const basic_string& str,
            size_type pos = 0) const noexcept;
        size_type find_first_not_of(const charT* s, size_type pos,
            size_type n) const;
        size_type find_first_not_of(const charT* s, size_type pos = 0) const;
        size_type find_first_not_of(charT c, size_type pos = 0) const;
        size_type find_last_not_of(const basic_string& str,
            size_type pos = npos) const noexcept;
        size_type find_last_not_of(const charT* s, size_type pos,
            size_type n) const;
        size_type find_last_not_of(const charT* s,
            size_type pos = npos) const;
        size_type find_last_not_of(charT c, size_type pos = npos) const;
        basic_string substr(size_type pos = 0, size_type n = npos) const;
        int compare(const basic_string& str) const noexcept;
        int compare(size_type pos1, size_type n1,
            const basic_string& str) const;
        int compare(size_type pos1, size_type n1,
            const basic_string& str,
            size_type pos2, size_type n2 = npos) const;
        int compare(const charT* s) const;
        int compare(size_type pos1, size_type n1,
            const charT* s) const;
        int compare(size_type pos1, size_type n1,
            const charT* s, size_type n2) const;

    private:
        Allocator mAllocator;
        size_t mLength;
        size_t mCapacity;
        charT *mStr;
    };

    template<class charT, class traits, class Allocator>
    basic_string<charT, traits, Allocator>
        operator+(const basic_string<charT, traits, Allocator>& lhs,
            const basic_string<charT, traits, Allocator>& rhs);
    template<class charT, class traits, class Allocator>
    basic_string<charT, traits, Allocator>
        operator+(basic_string<charT, traits, Allocator>&& lhs,
            const basic_string<charT, traits, Allocator>& rhs);
    template<class charT, class traits, class Allocator>
    basic_string<charT, traits, Allocator>
        operator+(const basic_string<charT, traits, Allocator>& lhs,
            basic_string<charT, traits, Allocator>&& rhs);
    template<class charT, class traits, class Allocator>
    basic_string<charT, traits, Allocator>
        operator+(basic_string<charT, traits, Allocator>&& lhs,
            basic_string<charT, traits, Allocator>&& rhs);
    template<class charT, class traits, class Allocator>
    basic_string<charT, traits, Allocator>
        operator+(const charT* lhs,
            const basic_string<charT, traits, Allocator>& rhs);
    template<class charT, class traits, class Allocator>
    basic_string<charT, traits, Allocator>
        operator+(const charT* lhs,
            basic_string<charT, traits, Allocator>&& rhs);
    template<class charT, class traits, class Allocator>
    basic_string<charT, traits, Allocator>
        operator+(charT lhs, const basic_string<charT, traits, Allocator>& rhs);
    template<class charT, class traits, class Allocator>
    basic_string<charT, traits, Allocator>
        operator+(charT lhs, basic_string<charT, traits, Allocator>&& rhs);
    template<class charT, class traits, class Allocator>
    basic_string<charT, traits, Allocator>
        operator+(const basic_string<charT, traits, Allocator>& lhs,
            const charT* rhs);
    template<class charT, class traits, class Allocator>
    basic_string<charT, traits, Allocator>
        operator+(basic_string<charT, traits, Allocator>&& lhs,
            const charT* rhs);
    template<class charT, class traits, class Allocator>
    basic_string<charT, traits, Allocator>
        operator+(const basic_string<charT, traits, Allocator>& lhs, charT rhs);
    template<class charT, class traits, class Allocator>
    basic_string<charT, traits, Allocator>
        operator+(basic_string<charT, traits, Allocator>&& lhs, charT rhs);

    template<class charT, class traits, class Allocator>
    bool operator==(const basic_string<charT, traits, Allocator>& lhs,
        const basic_string<charT, traits, Allocator>& rhs) noexcept
    {
        // todo: do this better? And verify it's right
        if (lhs.c_str() == rhs.c_str()
            && lhs.capacity() == rhs.capacity()
            && lhs.size() == rhs.size())
        {
            return true;
        }

        return false;
    }

    template<class charT, class traits, class Allocator>
    bool operator==(const charT* lhs,
        const basic_string<charT, traits, Allocator>& rhs);
    template<class charT, class traits, class Allocator>
    bool operator==(const basic_string<charT, traits, Allocator>& lhs,
        const charT* rhs);
    template<class charT, class traits, class Allocator>
    bool operator!=(const basic_string<charT, traits, Allocator>& lhs,
        const basic_string<charT, traits, Allocator>& rhs) noexcept;
    template<class charT, class traits, class Allocator>
    bool operator!=(const charT* lhs,
        const basic_string<charT, traits, Allocator>& rhs);
    template<class charT, class traits, class Allocator>
    bool operator!=(const basic_string<charT, traits, Allocator>& lhs,
        const charT* rhs);
    template<class charT, class traits, class Allocator>
    bool operator< (const basic_string<charT, traits, Allocator>& lhs,
        const basic_string<charT, traits, Allocator>& rhs) noexcept;
    template<class charT, class traits, class Allocator>
    bool operator< (const basic_string<charT, traits, Allocator>& lhs,
        const charT* rhs);
    template<class charT, class traits, class Allocator>
    bool operator< (const charT* lhs,
        const basic_string<charT, traits, Allocator>& rhs);
    template<class charT, class traits, class Allocator>
    bool operator> (const basic_string<charT, traits, Allocator>& lhs,
        const basic_string<charT, traits, Allocator>& rhs) noexcept;
    template<class charT, class traits, class Allocator>
    bool operator> (const basic_string<charT, traits, Allocator>& lhs,
        const charT* rhs);
    template<class charT, class traits, class Allocator>
    bool operator> (const charT* lhs,
        const basic_string<charT, traits, Allocator>& rhs);
    template<class charT, class traits, class Allocator>
    bool operator<=(const basic_string<charT, traits, Allocator>& lhs,
        const basic_string<charT, traits, Allocator>& rhs) noexcept;
    template<class charT, class traits, class Allocator>
    bool operator<=(const basic_string<charT, traits, Allocator>& lhs,
        const charT* rhs);
    template<class charT, class traits, class Allocator>
    bool operator<=(const charT* lhs,
        const basic_string<charT, traits, Allocator>& rhs);
    template<class charT, class traits, class Allocator>
    bool operator>=(const basic_string<charT, traits, Allocator>& lhs,
        const basic_string<charT, traits, Allocator>& rhs) noexcept;
    template<class charT, class traits, class Allocator>
    bool operator>=(const basic_string<charT, traits, Allocator>& lhs,
        const charT* rhs);
    template<class charT, class traits, class Allocator>
    bool operator>=(const charT* lhs,
        const basic_string<charT, traits, Allocator>& rhs);

    // 21.4.8.8, swap:
    template<class charT, class traits, class Allocator>
    void swap(basic_string<charT, traits, Allocator>& lhs,
        basic_string<charT, traits, Allocator>& rhs)
        noexcept(noexcept(lhs.swap(rhs)))
    {
        lhs.swap(rhs);
    }

    // 21.4.8.9, inserters and extractors:
    template<class charT, class traits, class Allocator>
    basic_istream<charT, traits>&
        operator>>(basic_istream<charT, traits>& is,
            basic_string<charT, traits, Allocator>& str);
    template<class charT, class traits, class Allocator>
    basic_ostream<charT, traits>&
        operator<<(basic_ostream<charT, traits>& os,
            const basic_string<charT, traits, Allocator>& str);
    template<class charT, class traits, class Allocator>
    basic_istream<charT, traits>&
        getline(basic_istream<charT, traits>& is,
            basic_string<charT, traits, Allocator>& str,
            charT delim);
    template<class charT, class traits, class Allocator>
    basic_istream<charT, traits>&
        getline(basic_istream<charT, traits>&& is,
            basic_string<charT, traits, Allocator>& str,
            charT delim);
    template<class charT, class traits, class Allocator>
    basic_istream<charT, traits>&
        getline(basic_istream<charT, traits>& is,
            basic_string<charT, traits, Allocator>& str);
    template<class charT, class traits, class Allocator>
    basic_istream<charT, traits>&
        getline(basic_istream<charT, traits>&& is,
            basic_string<charT, traits, Allocator>& str);

    // basic_string typedef names
    typedef basic_string<char> string;
    typedef basic_string<char16_t> u16string;
    typedef basic_string<char32_t> u32string;
    typedef basic_string<wchar_t> wstring;
    // 21.5, numeric conversions:
    int stoi(const string& str, size_t* idx = 0, int base = 10);
    long stol(const string& str, size_t* idx = 0, int base = 10);
    unsigned long stoul(const string& str, size_t* idx = 0, int base = 10);
    long long stoll(const string& str, size_t* idx = 0, int base = 10);
    unsigned long long stoull(const string& str, size_t* idx = 0, int base = 10);
    float stof(const string& str, size_t* idx = 0);
    double stod(const string& str, size_t* idx = 0);
    long double stold(const string& str, size_t* idx = 0);
    string to_string(int val);
    string to_string(unsigned val);
    string to_string(long val);
    string to_string(unsigned long val);
    string to_string(long long val);
    string to_string(unsigned long long val);
    string to_string(float val);
    string to_string(double val);
    string to_string(long double val);
    int stoi(const wstring& str, size_t* idx = 0, int base = 10);
    long stol(const wstring& str, size_t* idx = 0, int base = 10);
    unsigned long stoul(const wstring& str, size_t* idx = 0, int base = 10);
    long long stoll(const wstring& str, size_t* idx = 0, int base = 10);
    unsigned long long stoull(const wstring& str, size_t* idx = 0, int base = 10);
    float stof(const wstring& str, size_t* idx = 0);
    double stod(const wstring& str, size_t* idx = 0);
    long double stold(const wstring& str, size_t* idx = 0);
    wstring to_wstring(int val);
    wstring to_wstring(unsigned val);
    wstring to_wstring(long val);
    wstring to_wstring(unsigned long val);
    wstring to_wstring(long long val);
    wstring to_wstring(unsigned long long val);
    wstring to_wstring(float val);
    wstring to_wstring(double val);
    wstring to_wstring(long double val);
    // 21.6, hash support:
    template <class T> struct hash;
    template <> struct hash<string>;
    template <> struct hash<u16string>;
    template <> struct hash<u32string>;
    template <> struct hash<wstring>;
    inline namespace literals {
        inline namespace string_literals {
            // 21.7, suffix for basic_string literals:
            string operator "" s(const char* str, size_t len);
            u16string operator "" s(const char16_t* str, size_t len);
            u32string operator "" s(const char32_t* str, size_t len);
            wstring operator "" s(const wchar_t* str, size_t len);
        }
    }
}

#endif