#pragma once

#ifndef _RATIO_
#define _RATIO_

#include <cstdint>
#include <type_traits>

namespace STD
{
    // 20.11.3, class template ratio
    template <intmax_t N, intmax_t D = 1>
    class ratio
    {
    public:
        static constexpr intmax_t num;
        static constexpr intmax_t den;
        typedef ratio<num, den> type;
    };

    // 20.11.4, ratio arithmetic
    template <class R1, class R2> using ratio_add = see below;
    template <class R1, class R2> using ratio_subtract = see below;
    template <class R1, class R2> using ratio_multiply = see below;
    template <class R1, class R2> using ratio_divide = see below;
    // 20.11.5, ratio comparison
    template <class R1, class R2>
    struct ratio_equal
        : bool_constant<R1::num == R2::num && R1::den == R2::den>
    {
    };

    template <class R1, class R2>
    struct ratio_not_equal
        : bool_constant<!ratio_equal<R1, R2>::value>
    {
    };

    template <class R1, class R2>
    struct ratio_less;

    template <class R1, class R2>
    struct ratio_less_equal;

    template <class R1, class R2>
    struct ratio_greater;

    template <class R1, class R2>
    struct ratio_greater_equal;

    // 20.11.6, convenience SI typedefs
    //typedef ratio<1, 1000000000000000000000000> yocto; // integer too large for i64
    //typedef ratio<1, 1000000000000000000000> zepto; // integer too large for i64
    typedef ratio<1, 1000000000000000000> atto;
    typedef ratio<1, 1000000000000000> femto;
    typedef ratio<1, 1000000000000> pico;
    typedef ratio<1, 1000000000> nano;
    typedef ratio<1, 1000000> micro;
    typedef ratio<1, 1000> milli;
    typedef ratio<1, 100> centi;
    typedef ratio<1, 10> deci;
    typedef ratio<10, 1> deca;
    typedef ratio<100, 1> hecto;
    typedef ratio<1000, 1> kilo;
    typedef ratio<1000000, 1> mega;
    typedef ratio<1000000000, 1> giga;
    typedef ratio<1000000000000, 1> tera;
    typedef ratio<1000000000000000, 1> peta;
    typedef ratio<1000000000000000000, 1> exa;
    //typedef ratio<1000000000000000000000, 1> zetta; // integer too large for i64
    //typedef ratio<1000000000000000000000000, 1> yotta; // integer too large for i64
}

#endif