#pragma once

#ifndef _ITERATOR_
#define _ITERATOR_

#include "cstddef"
#include "memory"

namespace STD {
    // 24.4, primitives:
    template<class Iterator>
    struct iterator_traits;

    struct input_iterator_tag { };
    struct output_iterator_tag { };
    struct forward_iterator_tag : public input_iterator_tag { };
    struct bidirectional_iterator_tag : public forward_iterator_tag { };
    struct random_access_iterator_tag : public bidirectional_iterator_tag { };

    template<class T>
    struct iterator_traits<T*>
    {
        typedef STD::ptrdiff_t difference_type;
        typedef T value_type;
        typedef T* pointer;
        typedef T& reference;
        typedef random_access_iterator_tag iterator_category;
    };

    template<class T>
    struct iterator_traits<const T*>
    {
        typedef STD::ptrdiff_t difference_type;
        typedef T value_type;
        typedef const T* pointer;
        typedef const T& reference;
        typedef random_access_iterator_tag iterator_category;
    };

    template<class Category, class T, class Distance = ptrdiff_t,
        class Pointer = T*, class Reference = T&>
        struct iterator
    {
        typedef T value_type;
        typedef Distance difference_type;
        typedef Pointer pointer;
        typedef Reference reference;
        typedef Category iterator_category;
    };

    // 24.4.4, iterator operations:
    template <class InputIterator, class Distance>
    void advance(InputIterator& i, Distance n);

    template <class InputIterator>
    typename iterator_traits<InputIterator>::difference_type
        distance(InputIterator first, InputIterator last);

    template <class ForwardIterator>
    ForwardIterator next(ForwardIterator x,
        typename iterator_traits<ForwardIterator>::difference_type n = 1);

    template <class BidirectionalIterator>
    BidirectionalIterator prev(BidirectionalIterator x,
        typename iterator_traits<BidirectionalIterator>::difference_type n = 1);

    // 24.5, predefined iterators:
    template <class Iterator>
    class reverse_iterator
    {
    public:
        typedef Iterator iterator_type;
        typedef typename iterator_traits<Iterator>::iterator_category iterator_category;
        typedef typename iterator_traits<Iterator>::value_type value_type;
        typedef typename iterator_traits<Iterator>::difference_type difference_type;
        typedef typename iterator_traits<Iterator>::pointer pointer;
        typedef typename iterator_traits<Iterator>::reference reference;

        reverse_iterator() : current()
        {
        }

        explicit reverse_iterator(Iterator x) : current(x)
        {
        }

        template <class U> reverse_iterator(const reverse_iterator<U>& u)
            : current(u.current)
        {
        }

        template <class U>
        reverse_iterator& operator=(const reverse_iterator<U>& u)
        {
            current = u.base();
            return *this;
        }

        Iterator base() const // explicit
        {
            return current;
        }

        reference operator*() const
        {
            Iterator tmp = current;
            return *--tmp;
        }

        pointer operator->() const
        {
            return addressof(operator*());
        }

        reverse_iterator& operator++()
        {
            --current;
            return *this;
        }

        reverse_iterator operator++(int)
        {
            reverse_iterator tmp = *this;
            --current;
            return tmp;
        }

        reverse_iterator& operator--()
        {
            ++current;
            return *this;
        }

        reverse_iterator operator--(int)
        {
            reverse_iterator tmp = *this;
            ++current;
            return tmp;
        }

        reverse_iterator operator+(difference_type n) const
        {
            return reverse_iterator(current - n);
        }

        reverse_iterator& operator+=(difference_type n)
        {
            current -= n;
            return *this;
        }

        reverse_iterator operator-(difference_type n) const
        {
            return reverse_iterator(current + n);
        }

        reverse_iterator& operator-=(difference_type n)
        {
            current += n;
            return *this;
        }

        //unspecified operator[](difference_type n) const; //todo
    protected:
        Iterator current;
    };

    template <class Iterator1, class Iterator2>
    bool operator==(
        const reverse_iterator<Iterator1>& x,
        const reverse_iterator<Iterator2>& y)
    {
        return x.current == y.current;
    }

    template <class Iterator1, class Iterator2>
    bool operator<(
        const reverse_iterator<Iterator1>& x,
        const reverse_iterator<Iterator2>& y)
    {
        return x.current > y.current;
    }

    template <class Iterator1, class Iterator2>
    bool operator!=(
        const reverse_iterator<Iterator1>& x,
        const reverse_iterator<Iterator2>& y)
    {
        return x.current != y.current;
    }

    template <class Iterator1, class Iterator2>
    bool operator>(
        const reverse_iterator<Iterator1>& x,
        const reverse_iterator<Iterator2>& y)
    {
        return x.current < y.current;
    }

    template <class Iterator1, class Iterator2>
    bool operator>=(
        const reverse_iterator<Iterator1>& x,
        const reverse_iterator<Iterator2>& y)
    {
        return x.current <= y.current;
    }

    template <class Iterator1, class Iterator2>
    bool operator<=(
        const reverse_iterator<Iterator1>& x,
        const reverse_iterator<Iterator2>& y)
    {
        return x.current >= y.current;
    }

    template <class Iterator1, class Iterator2>
    auto operator-(
        const reverse_iterator<Iterator1>& x,
        const reverse_iterator<Iterator2>& y) ->decltype(y.base() - x.base())
    {
        return y.current - x.current;
    }

    template <class Iterator>
    reverse_iterator<Iterator>
        operator+(
            typename reverse_iterator<Iterator>::difference_type n,
            const reverse_iterator<Iterator>& x)
    {
        return reverse_iterator<Iterator>(x.current - n);
    }

    template <class Iterator>
    reverse_iterator<Iterator> make_reverse_iterator(Iterator i)
    {
        return reverse_iterator<Iterator>(i);
    }

    template <class Container>
    class back_insert_iterator
    {
    protected:
        Container* container;
    public:
        typedef output_iterator_tag iterator_category;
        typedef void value_type;
        typedef void difference_type;
        typedef void pointer;
        typedef void reference;
        typedef Container container_type;

        explicit back_insert_iterator(Container& x) : container(addressof(x))
        {
        }

        back_insert_iterator& operator=(const typename Container::value_type& value)
        {
            container->push_back(value);
            return *this;
        }

        back_insert_iterator& operator=(typename Container::value_type&& value)
        {
            container->push_back(move(value));
            return *this;
        }

        back_insert_iterator& operator*()
        {
            return *this;
        }

        back_insert_iterator& operator++()
        {
            return *this;
        }

        back_insert_iterator operator++(int)
        {
            return *this;
        }
    };

    template <class Container>
    back_insert_iterator<Container> back_inserter(Container& x)
    {
        return back_insert_iterator<Container>(x);
    }

    template <class Container>
    class front_insert_iterator
    {
    protected:
        Container* container;
    public:
        typedef output_iterator_tag iterator_category;
        typedef void value_type;
        typedef void difference_type;
        typedef void pointer;
        typedef void reference;
        typedef Container container_type;

        explicit front_insert_iterator(Container& x) : container(addressof(x))
        {
        }

        front_insert_iterator& operator=(const typename Container::value_type& value)
        {
            container->push_front(value);
            return *this;
        }

        front_insert_iterator& operator=(typename Container::value_type&& value)
        {
            container->push_front(move(value));
            return *this;
        }

        front_insert_iterator& operator*()
        {
            return *this;
        }

        front_insert_iterator& operator++()
        {
            return *this;
        }

        front_insert_iterator operator++(int)
        {
            return *this;
        }
    };

    template <class Container>
    front_insert_iterator<Container> front_inserter(Container& x)
    {
        return front_insert_iterator<Container>(x);
    }

    template <class Container>
    class insert_iterator
    {
    protected:
        Container* container;
        typename Container::iterator iter;
    public:
        typedef output_iterator_tag iterator_category;
        typedef void value_type;
        typedef void difference_type;
        typedef void pointer;
        typedef void reference;
        typedef Container container_type;

        insert_iterator(Container& x, typename Container::iterator i)
            : container(addressof(x)), iter(i)
        {
        }

        insert_iterator& operator=(const typename Container::value_type& value)
        {
            iter = container->insert(iter, value);
            ++iter;
            return *this;
        }

        insert_iterator& operator=(typename Container::value_type&& value)
        {
            iter = container->insert(iter, move(value));
            ++iter;
            return *this;
        }

        insert_iterator& operator*()
        {
            return *this;
        }

        insert_iterator& operator++()
        {
            return *this;
        }

        insert_iterator& operator++(int)
        {
            return *this;
        }
    };

    template <class Container>
    insert_iterator<Container> inserter(Container& x, typename Container::iterator i)
    {
        return insert_iterator<Container>(x, i);
    }

    template <class Iterator>
    class move_iterator
    {
    public:
        typedef Iterator iterator_type;
        typedef typename iterator_traits<Iterator>::difference_type difference_type;
        typedef Iterator pointer;
        typedef typename iterator_traits<Iterator>::value_type value_type;
        typedef typename iterator_traits<Iterator>::iterator_category iterator_category;
        //typedef see below reference; //todo

        move_iterator() : current()
        {
        }

        explicit move_iterator(Iterator i) : current(i)
        {
        }

        template <class U>
        move_iterator(const move_iterator<U>& u) : current(u.base())
        {
        }

        template <class U>
        move_iterator& operator=(const move_iterator<U>& u)
        {
            current = u.base();
            return *this;
        }

        iterator_type base() const
        {
            return current;
        }

        //reference operator*() const;

        pointer operator->() const
        {
            return current;
        }

        move_iterator& operator++()
        {
            ++current;
            return *this;
        }

        move_iterator operator++(int)
        {
            move_iterator tmp = *this;
            ++current;
            return tmp;
        }

        move_iterator& operator--()
        {
            --current;
            return *this;
        }

        move_iterator operator--(int)
        {
            move_iterator tmp = *this;
            --current;
            return *this;
        }

        move_iterator operator+(difference_type n) const
        {
            return move_iterator(current + n);
        }

        move_iterator& operator+=(difference_type n)
        {
            current += n;
            return *this;
        }

        move_iterator operator-(difference_type n) const
        {
            return move_iterator(current - n);
        }

        move_iterator& operator-=(difference_type n)
        {
            current -= n;
            return *this;
        }

        //unspecified operator[](difference_type n) const; //todo
    private:
        Iterator current; // exposition only
    };

    template <class Iterator1, class Iterator2>
    bool operator==(
        const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y)
    {
        return x.base() == y.base();
    }

    template <class Iterator1, class Iterator2>
    bool operator!=(
        const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y)
    {
        return !(x == y);
    }

    template <class Iterator1, class Iterator2>
    bool operator<(
        const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y)
    {
        return x.base() < y.base();
    }

    template <class Iterator1, class Iterator2>
    bool operator<=(
        const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y)
    {
        return !(y < x);
    }

    template <class Iterator1, class Iterator2>
    bool operator>(
        const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y)
    {
        return y < x;
    }

    template <class Iterator1, class Iterator2>
    bool operator>=(
        const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y)
    {
        return !(x < y);
    }

    template <class Iterator1, class Iterator2>
    auto operator-(
        const move_iterator<Iterator1>& x,
        const move_iterator<Iterator2>& y) -> decltype(x.base() - y.base())
    {
        return x.base() - y.base();
    }

    template <class Iterator>
    move_iterator<Iterator> operator+(
        typename move_iterator<Iterator>::difference_type n, const move_iterator<Iterator>& x)
    {
        return x + n;
    }

    template <class Iterator>
    move_iterator<Iterator> make_move_iterator(Iterator i)
    {
        return move_iterator<Iterator>(i);
    }

    // 24.6, stream iterators:
    template <class T, class charT = char, class traits = char_traits<charT>,
        class Distance = ptrdiff_t>
    class istream_iterator
    {
    public:
        typedef input_iterator_tag iterator_category;
        typedef T value_type;
        typedef Distance difference_type;
        typedef const T* pointer;
        typedef const T& reference;
        typedef charT char_type;
        typedef traits traits_type;
        typedef basic_istream<charT, traits> istream_type;

        // todo: constexpr ctor if T is literal type
        istream_iterator() : in_stream(nullptr)
        {
        }

        istream_iterator(istream_type& s) : in_stream(s)
        {
        }

        istream_iterator(const istream_iterator& x) = default;
        ~istream_iterator() = default;

        const T& operator*() const
        {
            return value;
        }

        const T* operator->() const
        {
            return &(operator*());
        }

        istream_iterator& operator++()
        {
            if (in_stream == nullptr)
            {
                // todo: throw
            }

            *in_stream >> value;
            return *this;
        }

        istream_iterator operator++(int)
        {
            if (in_stream == nullptr)
            {
                // todo: throw
            }

            istream_iterator tmp = *this;
            *in_stream >> value;
            return tmp;
        }
    private:
        basic_istream<charT, traits>* in_stream; // exposition only
        T value; // exposition only
    };

    template <class T, class charT, class traits, class Distance>
    bool operator==(const istream_iterator<T, charT, traits, Distance>& x,
        const istream_iterator<T, charT, traits, Distance>& y)
    {
        return x.in_stream == y.in_stream;
    }

    template <class T, class charT, class traits, class Distance>
    bool operator!=(const istream_iterator<T, charT, traits, Distance>& x,
        const istream_iterator<T, charT, traits, Distance>& y)
    {
        return !(x == y);
    }

    template <class T, class charT = char, class traits = char_traits<charT> >
    class ostream_iterator
    {
    public:
        typedef output_iterator_tag iterator_category;
        typedef void value_type;
        typedef void difference_type;
        typedef void pointer;
        typedef void reference;
        typedef charT char_type;
        typedef traits traits_type;
        typedef basic_ostream<charT, traits> ostream_type;

        ostream_iterator(ostream_type& s) : out_stream(&s), delim(nullptr)
        {
        }

        ostream_iterator(ostream_type& s, const charT* delimiter) : out_stream(&s), delim(delimiter)
        {
        }

        ostream_iterator(const ostream_iterator& x);

        ~ostream_iterator();

        ostream_iterator& operator=(const T& value)
        {
            *out_stream << value;
            if (delim != nullptr)
            {
                *out_stream << delim;
            }

            return *this;
        }

        ostream_iterator& operator*()
        {
            return *this;
        }

        ostream_iterator& operator++()
        {
            return *this;
        }

        ostream_iterator& operator++(int)
        {
            return *this;
        }
    private:
        basic_ostream<charT, traits>* out_stream; // exposition only
        const charT* delim; // exposition only
    };

    template<class charT, class traits = char_traits<charT> >
    class istreambuf_iterator
    {
    public:
        typedef input_iterator_tag iterator_category;
        typedef charT value_type;
        typedef typename traits::off_type difference_type;
        typedef int * pointer;// todo: typedef unspecified pointer;
        typedef charT reference;
        typedef charT char_type;
        typedef traits traits_type;
        typedef typename traits::int_type int_type;
        typedef basic_streambuf<charT, traits> streambuf_type;
        typedef basic_istream<charT, traits> istream_type;

        class proxy // exposition only
        {
            charT keep_;
            basic_streambuf<charT, traits>* sbuf_;
            proxy(charT c, basic_streambuf<charT, traits>* sbuf)
                : keep_(c), sbuf_(sbuf)
            {
            }
        public:
            charT operator*()
            {
                return keep_;
            }
        };

        constexpr istreambuf_iterator() noexcept;

        istreambuf_iterator(const istreambuf_iterator&) noexcept = default;
        ~istreambuf_iterator() = default;

        istreambuf_iterator(istream_type& s) noexcept;
        istreambuf_iterator(streambuf_type* s) noexcept;
        istreambuf_iterator(const proxy& p) noexcept;
        charT operator*() const;
        pointer operator->() const;
        istreambuf_iterator& operator++();
        proxy operator++(int);
        bool equal(const istreambuf_iterator& b) const;
    private:
        streambuf_type* sbuf_; // exposition only
    };

    template <class charT, class traits>
    bool operator==(const istreambuf_iterator<charT, traits>& a,
        const istreambuf_iterator<charT, traits>& b)
    {
        a.equal(b);
    }

    template <class charT, class traits>
    bool operator!=(const istreambuf_iterator<charT, traits>& a,
        const istreambuf_iterator<charT, traits>& b)
    {
        !a.equal(b);
    }

    template <class charT, class traits = char_traits<charT> >
    class ostreambuf_iterator;

    // 24.7, range access:
    template <class C>
    auto begin(C& c) -> decltype(c.begin())
    {
        return c.begin();
    }

    template <class C>
    auto begin(const C& c) -> decltype(c.begin())
    {
        return c.begin();
    }

    template <class C>
    auto end(C& c) -> decltype(c.end())
    {
        return c.end();
    }

    template <class C>
    auto end(const C& c) -> decltype(c.end())
    {
        return c.end();
    }

    template <class T, size_t N>
    constexpr T* begin(T(&array)[N]) noexcept
    {
        return array;
    }

    template <class T, size_t N>
    constexpr T* end(T(&array)[N]) noexcept
    {
        return array + N;
    }

    template <class C>
    constexpr auto cbegin(const C& c) noexcept(noexcept(STD::begin(c)))
        -> decltype(STD::begin(c))
    {
        return STD::begin(c);
    }

    template <class C>
    constexpr auto cend(const C& c) noexcept(noexcept(STD::end(c)))
        -> decltype(STD::end(c))
    {
        return STD::end(c);
    }

    template <class C>
    auto rbegin(C& c) -> decltype(c.rbegin())
    {
        return c.rbegin();
    }

    template <class C>
    auto rbegin(const C& c) -> decltype(c.rbegin())
    {
        return c.rbegin();
    }

    template <class C>
    auto rend(C& c) -> decltype(c.rend())
    {
        return c.rend();
    }

    template <class C>
    auto rend(const C& c) -> decltype(c.rend())
    {
        return c.rend();
    }

    template <class T, size_t N>
    reverse_iterator<T*> rbegin(T(&array)[N])
    {
        return reverse_iterator<T*>(array + N);
    }

    template <class T, size_t N>
    reverse_iterator<T*> rend(T(&array)[N])
    {
        return reverse_iterator<T*>(array);
    }

    template <class E>
    reverse_iterator<const E*> rbegin(initializer_list<E> il)
    {
        return reverse_iterator<const E*>(il.end());
    }

    template <class E>
    reverse_iterator<const E*> rend(initializer_list<E> il)
    {
        return reverse_iterator<const E*>(il.begin());
    }

    template <class C>
    auto crbegin(const C& c) -> decltype(STD::rbegin(c))
    {
        return STD::rbegin(c);
    }

    template <class C>
    auto crend(const C& c) -> decltype(STD::rend(c))
    {
        return STD::rend(c);
    }

    // 24.8, container access:
    template <class C>
    constexpr auto size(const C& c) -> decltype(c.size())
    {
        return c.size();
    }

    template <class T, size_t N>
    constexpr size_t size(const T(&array)[N]) noexcept
    {
        return N;
    }

    template <class C>
    constexpr auto empty(const C& c) -> decltype(c.empty())
    {
        return c.empty();
    }

    template <class T, size_t N>
    constexpr bool empty(const T(&array)[N]) noexcept
    {
        return false;
    }

    template <class E>
    constexpr bool empty(initializer_list<E> il) noexcept
    {
        return il.size() == 0;
    }

    template <class C>
    constexpr auto data(C& c) -> decltype(c.data())
    {
        return c.data();
    }

    template <class C>
    constexpr auto data(const C& c) -> decltype(c.data())
    {
        return c.data();
    }

    template <class T, size_t N>
    constexpr T* data(T(&array)[N]) noexcept
    {
        return array;
    }

    template <class E>
    constexpr const E* data(initializer_list<E> il) noexcept
    {
        return il.begin();
    }
}
#endif