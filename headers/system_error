#pragma once
#ifndef _SYSTEMERROR_
#define _SYSTEMERROR_

#include <stdexcept>
//#include <string>

namespace STD
{
    class error_category;
    class error_code;
    class error_condition;

    const error_category& generic_category() noexcept;
    const error_category& system_category() noexcept;

    enum class errc {
        address_family_not_supported, // EAFNOSUPPORT
        address_in_use, // EADDRINUSE
        address_not_available, // EADDRNOTAVAIL
        already_connected, // EISCONN
        argument_list_too_long, // E2BIG
        argument_out_of_domain, // EDOM
        bad_address, // EFAULT
        bad_file_descriptor, // EBADF
        bad_message, // EBADMSG
        broken_pipe, // EPIPE
        connection_aborted, // ECONNABORTED
        connection_already_in_progress, // EALREADY
        connection_refused, // ECONNREFUSED
        connection_reset, // ECONNRESET
        cross_device_link, // EXDEV
        destination_address_required, // EDESTADDRREQ
        device_or_resource_busy, // EBUSY
        directory_not_empty, // ENOTEMPTY
        executable_format_error, // ENOEXEC
        file_exists, // EEXIST
        file_too_large, // EFBIG
        filename_too_long, // ENAMETOOLONG
        function_not_supported, // ENOSYS
        host_unreachable, // EHOSTUNREACH
        identifier_removed, // EIDRM
        illegal_byte_sequence, // EILSEQ
        inappropriate_io_control_operation, // ENOTTY
        interrupted, // EINTR
        invalid_argument, // EINVAL
        invalid_seek, // ESPIPE
        io_error, // EIO
        is_a_directory, // EISDIR
        message_size, // EMSGSIZE
        network_down, // ENETDOWN
        network_reset, // ENETRESET
        network_unreachable, // ENETUNREACH
        no_buffer_space, // ENOBUFS
        no_child_process, // ECHILD
        no_link, // ENOLINK
        no_lock_available, // ENOLCK
        no_message_available, // ENODATA
        no_message, // ENOMSG
        no_protocol_option, // ENOPROTOOPT
        no_space_on_device, // ENOSPC
        no_stream_resources, // ENOSR
        no_such_device_or_address, // ENXIO
        no_such_device, // ENODEV
        no_such_file_or_directory, // ENOENT
        no_such_process, // ESRCH
        not_a_directory, // ENOTDIR
        not_a_socket, // ENOTSOCK
        not_a_stream, // ENOSTR
        not_connected, // ENOTCONN
        not_enough_memory, // ENOMEM
        not_supported, // ENOTSUP
        operation_canceled, // ECANCELED
        operation_in_progress, // EINPROGRESS
        operation_not_permitted, // EPERM
        operation_not_supported, // EOPNOTSUPP
        operation_would_block, // EWOULDBLOCK
        owner_dead, // EOWNERDEAD
        permission_denied, // EACCES
        protocol_error, // EPROTO
        protocol_not_supported, // EPROTONOSUPPORT
        read_only_file_system, // EROFS
        resource_deadlock_would_occur, // EDEADLK
        resource_unavailable_try_again, // EAGAIN
        result_out_of_range, // ERANGE
        state_not_recoverable, // ENOTRECOVERABLE
        stream_timeout, // ETIME
        text_file_busy, // ETXTBSY
        timed_out, // ETIMEDOUT
        too_many_files_open_in_system, // ENFILE
        too_many_files_open, // EMFILE
        too_many_links, // EMLINK
        too_many_symbolic_link_levels, // ELOOP
        value_too_large, // EOVERFLOW
        wrong_protocol_type, // EPROTOTYPE
    };

    class error_category
    {
    public:
        constexpr error_category() noexcept;
        virtual ~error_category();
        error_category(const error_category&) = delete;
        error_category& operator=(const error_category&) = delete;
        virtual const char* name() const noexcept = 0;

        virtual error_condition default_error_condition(int ev) const noexcept;

        virtual bool equivalent(int code, const error_condition& condition) const noexcept;

        virtual bool equivalent(const error_code& code, int condition) const noexcept;

        virtual string message(int ev) const = 0;

        bool operator==(const error_category& rhs) const noexcept
        {
            return this == &rhs;
        }

        bool operator!=(const error_category& rhs) const noexcept
        {
            return !(*this == rhs);
        }

        bool operator<(const error_category& rhs) const noexcept
        {
            return false;
            //return less<const error_category*>()(this, &rhs);
        }
    };

    class error_code
    {
    public:
        // 19.5.2.2 constructors:
        error_code() noexcept : val_(0), cat_(&system_category())
        {
        }

        error_code(int val, const error_category& cat) noexcept : val_(val), cat_(&cat)
        {
        }

        template <class ErrorCodeEnum>
        error_code(ErrorCodeEnum e) noexcept
        {
            static_assert(is_error_code_enum<ErrorCodeEnum>::value, "Passed in argument is not an error code value");
            this = make_error_code(e);
        }

        // 19.5.2.3 modifiers:
        void assign(int val, const error_category& cat) noexcept
        {
            val_ = val;
            cat_ = &cat;
        }

        template <class ErrorCodeEnum>
        error_code& operator=(ErrorCodeEnum e) noexcept
        {
            static_assert(is_error_code_enum<ErrorCodeEnum>::value);
            this = make_error_code(e);

            return *this;
        }

        void clear() noexcept
        {
            val_ = 0;
            cat_ = &system_category();
        }

        // 19.5.2.4 observers:
        int value() const noexcept
        {
            return val_;
        }

        const error_category& category() const noexcept
        {
            return *cat_;
        }

        error_condition default_error_condition() const noexcept;

        string message() const
        {
            return cat_->message(val_);
        }

        explicit operator bool() const noexcept
        {
            return val_ != 0;
        }
    private:
        int val_; // exposition only
        const error_category* cat_; // exposition only
    };

    class error_condition
    {
    public:
        // 19.5.3.2 constructors:
        error_condition() noexcept : val_(0), cat_(&generic_category())
        {
        }

        error_condition(int val, const error_category& cat) noexcept : val_(val), cat_(&cat)
        {
        }

        template <class ErrorConditionEnum>
        error_condition(ErrorConditionEnum e) noexcept
        {
            static_assert(is_error_condition_enum<ErrorConditionEnum>::value, "Passed in argument is not an error condition value");
            *this = make_error_condition(e);
        }

        // 19.5.3.3 modifiers:
        void assign(int val, const error_category& cat) noexcept
        {
            val_ = val;
            cat_ = &cat;
        }

        template<class ErrorConditionEnum>
        error_condition& operator=(ErrorConditionEnum e) noexcept
        {
            static_assert(is_error_condition_enum<ErrorConditionEnum>::value);
            *this = make_error_condition(e);

            return *this;
        }

        void clear() noexcept
        {
            val_ = 0;
            cat_ = &generic_category();
        }

        // 19.5.3.4 observers:
        int value() const noexcept
        {
            return val_;
        }

        const error_category& category() const noexcept
        {
            return *cat_;
        }

        string message() const
        {
            return cat_->message(val_);
        }

        explicit operator bool() const noexcept
        {
            return val_ != 0;
        }
    private:
        int val_; // exposition only
        const error_category* cat_; // exposition only
    };

    error_condition error_code::default_error_condition() const noexcept
    {
        return cat_->default_error_condition(val_);
    }

    error_condition make_error_condition(errc e) noexcept
    {
        return error_condition(static_cast<int>(e), generic_category());
    }

    // 19.5.3.5 non-member functions:
    bool operator<(const error_condition& lhs, const error_condition& rhs) noexcept
    {
        return lhs.category() < rhs.category() || lhs.category() == rhs.category()
            && lhs.value() < rhs.value();
    }

    const error_category& generic_category() noexcept;
    const error_category& system_category() noexcept;

    error_code make_error_code(errc e) noexcept
    {
        return error_code(static_cast<int>(e), generic_category());
    }

    bool operator<(const error_code& lhs, const error_code& rhs) noexcept
    {
        return lhs.category() < rhs.category() || lhs.category() == rhs.category()
            && lhs.value() < rhs.value();
    }

    template <class charT, class traits>
    basic_ostream<charT, traits>&
        operator<<(basic_ostream<charT, traits>& os, const error_code& ec)
    {
        return os << ec.category().name() << ':' << ec.value();
    }

    class system_error : public runtime_error
    {
    public:
        system_error(error_code ec, const string& what_arg) :
            runtime_error(what_arg), mErrorCode(ec)
        {
        }

        system_error(error_code ec, const char* what_arg) :
            runtime_error(what_arg), mErrorCode(ec)
        {
        }

        system_error(error_code ec) :
            runtime_error("System error"), mErrorCode(ec)
        {
        }

        system_error(int ev, const error_category& ecat, const string& what_arg) :
            runtime_error(what_arg), mErrorCode(error_code(ev, ecat))
        {
        }

        system_error(int ev, const error_category& ecat, const char* what_arg) :
            runtime_error(what_arg), mErrorCode(error_code(ev, ecat))
        {
        }

        system_error(int ev, const error_category& ecat) :
            runtime_error("System error"), mErrorCode(error_code(ev, ecat))
        {
        }

        const error_code& code() const noexcept
        {
            return mErrorCode;
        }

        const char* what() const noexcept;
    private:
        error_code mErrorCode;
    };

    template <class T>
    struct is_error_code_enum : public false_type {};

    template <class T>
    struct is_error_condition_enum : public false_type {};

    template <>
    struct is_error_condition_enum<errc> : true_type { };

    // 19.5.4 Comparison operators:
    bool operator==(const error_code& lhs, const error_code& rhs) noexcept
    {
        return lhs.category() == rhs.category() && lhs.value() == rhs.value();
    }

    bool operator==(const error_code& lhs, const error_condition& rhs) noexcept
    {
        return lhs.category().equivalent(lhs.value(), rhs) || rhs.category().equivalent(lhs, rhs.value());
    }

    bool operator==(const error_condition& lhs, const error_code& rhs) noexcept
    {
        return rhs.category().equivalent(rhs.value(), lhs) || lhs.category().equivalent(rhs, lhs.value());
    }

    bool operator==(const error_condition& lhs, const error_condition& rhs) noexcept
    {
        return lhs.category() == rhs.category() && lhs.value() == rhs.value();
    }

    bool operator!=(const error_code& lhs, const error_code& rhs) noexcept
    {
        return !(lhs == rhs);
    }

    bool operator!=(const error_code& lhs, const error_condition& rhs) noexcept
    {
        return !(lhs == rhs);
    }

    bool operator!=(const error_condition& lhs, const error_code& rhs) noexcept
    {
        return !(lhs == rhs);
    }

    bool operator!=(const error_condition& lhs, const error_condition& rhs) noexcept
    {
        return !(lhs == rhs);
    }

    error_condition error_category::default_error_condition(int ev) const noexcept
    {
        return error_condition(ev, *this);
    }

    bool error_category::equivalent(int code, const error_condition& condition) const noexcept
    {
        return default_error_condition(code) == condition;
    }

    bool error_category::equivalent(const error_code& code, int condition) const noexcept
    {
        return *this == code.category() && code.value() == condition;
    }

    // 19.5.5 Hash support
    template <class T> struct hash;
    template <> struct hash<error_code>;
}

#endif